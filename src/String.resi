let splitAt: (string, int) => (Js.String2.t, Js.String2.t)
let capitalize: string => string
let compare: (string, string) => int
let shortenLargeString: (Js.String2.t, ~max: int=?, unit) => Js.String2.t
let prettyOptions: array<string> => string
let getRandomString: unit => string
let makeUniq: (string, string) => string
let splitByComma: string => array<Js.String2.t>
let stringToId: string => string
let includes: (Js.String2.t, Js.String2.t) => bool
let split: (Js.String2.t, Js.String2.t) => array<Js.String2.t>
let concat: (Js.String2.t, Js.String2.t) => Js.String2.t
let replaceByRe: (Js.String2.t, Js_re.t, Js.String2.t) => Js.String2.t
let endsWith: (Js.String2.t, Js.String2.t) => bool
let concatMany: (Js.String2.t, array<Js.String2.t>) => Js.String2.t
let toLowerCase: Js.String2.t => Js.String2.t
let toUpperCase: Js.String2.t => Js.String2.t
let length: Js.String2.t => int
let make: 'a => Js.String2.t
let replace: (Js.String2.t, Js.String2.t, Js.String2.t) => Js.String2.t
let match_: (Js.String2.t, Js_re.t) => option<array<option<Js.String2.t>>>
let charAt: (Js.String2.t, int) => Js.String2.t
let slice: (Js.String2.t, ~from: int, ~to_: int) => Js.String2.t
let trim: Js.String2.t => Js.String2.t
let get: (Js.String2.t, int) => Js.String2.t
let startsWith: (Js.String2.t, Js.String2.t) => bool
let sliceToEnd: (Js.String2.t, ~from: int) => Js.String2.t
let indexOf: (Js.String2.t, Js.String2.t) => int
