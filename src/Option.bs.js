// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Exn from "./Exn.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function getExn(a, descOpt) {
  var desc = descOpt !== undefined ? descOpt : "undefined getExn";
  if (a !== undefined) {
    return Caml_option.valFromOption(a);
  } else {
    return Exn.raise(desc);
  }
}

function $$return(a) {
  return Caml_option.some(a);
}

var bind = Belt_Option.flatMap;

function join(a) {
  return Belt_Option.flatMap(a, (function (x) {
                return x;
              }));
}

function $$const(o, a) {
  return Belt_Option.map(o, (function (param) {
                return a;
              }));
}

function some(a) {
  return Caml_option.some(a);
}

function none(_o) {
  
}

function apply(f, x) {
  if (f !== undefined && x !== undefined) {
    return Caml_option.some(Curry._1(f, Caml_option.valFromOption(x)));
  }
  
}

function liftA1(f, a) {
  if (a !== undefined) {
    return Caml_option.some(Curry._1(f, Caml_option.valFromOption(a)));
  }
  
}

function liftA2(f, a, b) {
  if (a !== undefined && b !== undefined) {
    return Caml_option.some(Curry._2(f, Caml_option.valFromOption(a), Caml_option.valFromOption(b)));
  }
  
}

function liftA3(f, a, b, c) {
  if (a !== undefined && b !== undefined && c !== undefined) {
    return Caml_option.some(Curry._3(f, Caml_option.valFromOption(a), Caml_option.valFromOption(b), Caml_option.valFromOption(c)));
  }
  
}

function applyFirst(f, x) {
  if (f !== undefined && x !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(f));
  }
  
}

function applySecond(f, x) {
  if (f !== undefined && x !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(x));
  }
  
}

function all2(a, b) {
  if (a !== undefined && b !== undefined) {
    return [
            Caml_option.valFromOption(a),
            Caml_option.valFromOption(b)
          ];
  }
  
}

function all3(a, b, c) {
  if (a !== undefined && b !== undefined && c !== undefined) {
    return [
            Caml_option.valFromOption(a),
            Caml_option.valFromOption(b),
            Caml_option.valFromOption(c)
          ];
  }
  
}

function all4(a, b, c, d) {
  if (a !== undefined && b !== undefined && c !== undefined && d !== undefined) {
    return [
            Caml_option.valFromOption(a),
            Caml_option.valFromOption(b),
            Caml_option.valFromOption(c),
            Caml_option.valFromOption(d)
          ];
  }
  
}

function all5(a, b, c, d, e) {
  if (a !== undefined && b !== undefined && c !== undefined && d !== undefined && e !== undefined) {
    return [
            Caml_option.valFromOption(a),
            Caml_option.valFromOption(b),
            Caml_option.valFromOption(c),
            Caml_option.valFromOption(d),
            Caml_option.valFromOption(e)
          ];
  }
  
}

function all6(a, b, c, d, e, f) {
  if (a !== undefined && b !== undefined && c !== undefined && d !== undefined && e !== undefined && f !== undefined) {
    return [
            Caml_option.valFromOption(a),
            Caml_option.valFromOption(b),
            Caml_option.valFromOption(c),
            Caml_option.valFromOption(d),
            Caml_option.valFromOption(e),
            Caml_option.valFromOption(f)
          ];
  }
  
}

function all(arr) {
  return arr.reduce((function (b, opt) {
                var match = all2(b, opt);
                if (match !== undefined) {
                  return match[0].concat([match[1]]);
                }
                
              }), []);
}

function distribute2(t) {
  if (t !== undefined) {
    return [
            Caml_option.some(t[0]),
            Caml_option.some(t[1])
          ];
  } else {
    return [
            undefined,
            undefined
          ];
  }
}

function distribute3(t) {
  if (t !== undefined) {
    return [
            Caml_option.some(t[0]),
            Caml_option.some(t[1]),
            Caml_option.some(t[2])
          ];
  } else {
    return [
            undefined,
            undefined,
            undefined
          ];
  }
}

function tap(a, fn) {
  Belt_Option.forEach(a, fn);
  return a;
}

function tapNone(a, fn) {
  if (a !== undefined) {
    
  } else {
    Curry._1(fn, undefined);
  }
  return a;
}

function invert(a, b) {
  if (a !== undefined) {
    return ;
  } else {
    return Caml_option.some(b);
  }
}

function predicate(v, b) {
  if (Curry._1(b, v)) {
    return Caml_option.some(v);
  }
  
}

function guard(a, p) {
  var match = Belt_Option.map(a, p);
  if (match !== undefined && match) {
    return a;
  }
  
}

function flap0(f) {
  return Belt_Option.map(f, (function (f) {
                return Curry._1(f, undefined);
              }));
}

function flap0_(f) {
  Belt_Option.map(f, (function (f) {
          return Curry._1(f, undefined);
        }));
}

function flap1(f, v) {
  return Belt_Option.map(f, (function (f) {
                return Curry._1(f, v);
              }));
}

function flap1_(f, v) {
  Belt_Option.map(f, (function (f) {
          return Curry._1(f, v);
        }));
}

function flap2(f, a, b) {
  return Belt_Option.map(f, (function (f) {
                return Curry._2(f, a, b);
              }));
}

var flap2_ = flap2;

function flap3(f, a, b, c) {
  return Belt_Option.map(f, (function (f) {
                return Curry._3(f, a, b, c);
              }));
}

var flap3_ = flap3;

function first(acc, a) {
  if (Belt_Option.isSome(acc)) {
    return acc;
  } else {
    return a;
  }
}

function log(d, s) {
  var fn = function (param) {
    console.log(s, param);
  };
  Belt_Option.forEach(d, fn);
  return d;
}

var keepU = Belt_Option.keepU;

var keep = Belt_Option.keep;

var forEachU = Belt_Option.forEachU;

var forEach = Belt_Option.forEach;

var mapWithDefaultU = Belt_Option.mapWithDefaultU;

var mapU = Belt_Option.mapU;

var map = Belt_Option.map;

var flatMapU = Belt_Option.flatMapU;

var flatMap = Belt_Option.flatMap;

var getWithDefault = Belt_Option.getWithDefault;

var orElse = Belt_Option.orElse;

var isSome = Belt_Option.isSome;

var isNone = Belt_Option.isNone;

var eqU = Belt_Option.eqU;

var eq = Belt_Option.eq;

var cmpU = Belt_Option.cmpU;

var cmp = Belt_Option.cmp;

var mapWithDefault = Belt_Option.mapWithDefault;

export {
  keepU ,
  keep ,
  forEachU ,
  forEach ,
  mapWithDefaultU ,
  mapU ,
  map ,
  flatMapU ,
  flatMap ,
  getWithDefault ,
  orElse ,
  isSome ,
  isNone ,
  eqU ,
  eq ,
  cmpU ,
  cmp ,
  mapWithDefault ,
  getExn ,
  $$return ,
  bind ,
  join ,
  $$const ,
  some ,
  none ,
  apply ,
  liftA1 ,
  liftA2 ,
  liftA3 ,
  applyFirst ,
  applySecond ,
  all2 ,
  all3 ,
  all4 ,
  all5 ,
  all6 ,
  all ,
  distribute2 ,
  distribute3 ,
  tap ,
  tapNone ,
  invert ,
  predicate ,
  guard ,
  flap0 ,
  flap0_ ,
  flap1 ,
  flap1_ ,
  flap2 ,
  flap2_ ,
  flap3 ,
  flap3_ ,
  first ,
  log ,
}
/* No side effect */
