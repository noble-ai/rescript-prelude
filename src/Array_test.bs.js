// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Int from "./Int.bs.js";
import * as $$Array from "./Array.bs.js";
import * as $$String from "./String.bs.js";
import * as Vitest from "@nobleai/rescript-vitest/src/Vitest.bs.js";
import * as Lodash from "lodash";
import * as Vitest$1 from "vitest";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

function makeArrayEvenOdd(even, odd, length) {
  return $$Array.range(length).flatMap(function (_a, i) {
              return [
                      "" + odd + "" + Int.toString(i) + "",
                      "" + even + "" + Int.toString(i) + ""
                    ];
            });
}

Vitest$1.describe("Array", (function (param) {
        Vitest$1.describe("#range", (function (param) {
                Vitest$1.describe("For medium length", (function (param) {
                        var res = $$Array.range(3);
                        Vitest.it("begins at zero", (function (param) {
                                Vitest$1.expect($$Array.get(res, 0)).toEqual(0);
                              }));
                        Vitest.it("excludes x", (function (param) {
                                Vitest$1.expect(res).not.toContain(3);
                              }));
                      }));
              }));
        Vitest$1.describe("#transpose", (function (param) {
                var arr = [
                  [
                    1,
                    2,
                    3,
                    4
                  ],
                  [
                    4,
                    5,
                    6,
                    7
                  ],
                  [
                    7,
                    8,
                    9,
                    10
                  ]
                ];
                var zip = Caml_splice_call.spliceApply(Lodash.zip, [arr]);
                Vitest$1.test("expect transpose", (function (param) {
                        Vitest$1.expect($$Array.get(zip, 0)).toEqual([
                              1,
                              4,
                              7
                            ]);
                        Vitest$1.expect($$Array.get(zip, 1)).toEqual([
                              2,
                              5,
                              8
                            ]);
                        Vitest$1.expect($$Array.get(zip, 2)).toEqual([
                              3,
                              6,
                              9
                            ]);
                        Vitest$1.expect($$Array.get(zip, 3)).toEqual([
                              4,
                              7,
                              10
                            ]);
                      }));
              }));
        Vitest$1.describe("#keepBind", (function (param) {
                var even = "even";
                var arr = $$Array.map(makeArrayEvenOdd(even, "odd", 10), (function (x) {
                        return x;
                      }));
                var keepEven = function (x) {
                  if ($$String.includes(x, even)) {
                    return x;
                  }
                  
                };
                var result = $$Array.keepBind(arr, keepEven);
                Vitest$1.test("returns evens", (function (param) {
                        Vitest$1.expect($$Array.every(result, (function (x) {
                                      return $$String.includes(x, even);
                                    }))).toBe(true);
                      }));
              }));
        Vitest$1.describe("#tail", (function (param) {
                Vitest$1.describe("length >= 2", (function (param) {
                        var arr = [
                          1,
                          2,
                          3,
                          4,
                          5
                        ];
                        var res = $$Array.tail(arr);
                        Vitest.it("is one element shorter", (function (param) {
                                Vitest$1.expect(res).toHaveLength($$Array.length(arr) - 1 | 0);
                              }));
                        Vitest.it("has second element as first", (function (param) {
                                Vitest$1.expect($$Array.get(res, 0)).toEqual(2);
                              }));
                      }));
                Vitest$1.describe("length 1", (function (param) {
                        var arr = [1];
                        var res = $$Array.tail(arr);
                        Vitest.it("is empty", (function (param) {
                                Vitest$1.expect(res).toEqual([]);
                              }));
                      }));
                Vitest$1.describe("length 0", (function (param) {
                        var arr = [];
                        var res = $$Array.tail(arr);
                        Vitest.it("is empty", (function (param) {
                                Vitest$1.expect(res).toEqual([]);
                              }));
                      }));
              }));
        Vitest$1.describe("#stem", (function (param) {
                Vitest$1.describe("length >= 1", (function (param) {
                        var arr = [
                          3,
                          4,
                          5
                        ];
                        var res = $$Array.stem(arr);
                        Vitest.it("is one element shorter", (function (param) {
                                Vitest$1.expect(res).toHaveLength($$Array.length(arr) - 1 | 0);
                              }));
                        Vitest.it("all elements in same place", (function (param) {
                                $$Array.forEachi(res, (function (x, i) {
                                        Vitest$1.expect(x).toEqual($$Array.get(arr, i));
                                      }));
                              }));
                      }));
                Vitest$1.describe("length 0", (function (param) {
                        var arr = [];
                        var res = $$Array.stem(arr);
                        Vitest.it("is empty", (function (param) {
                                Vitest$1.expect(res).toEqual([]);
                              }));
                      }));
              }));
        Vitest$1.describe("#zipAdjacent", (function (param) {
                var arr = [
                  1,
                  2,
                  3,
                  4,
                  5
                ];
                var res = $$Array.zipAdjacent(arr);
                Vitest.it("is one element shorter", (function (param) {
                        Vitest$1.expect(res).toHaveLength($$Array.length(arr) - 1 | 0);
                      }));
                Vitest.it("has adjacent pairs", (function (param) {
                        $$Array.forEachi(res, (function (x, i) {
                                var left = $$Array.getUnsafe(arr, i);
                                var right = $$Array.getUnsafe(arr, i + 1 | 0);
                                Vitest$1.expect(x).toEqual([
                                      left,
                                      right
                                    ]);
                              }));
                      }));
              }));
        Vitest$1.describe("#partitionIndexEvenOdd", (function (param) {
                var even = "even";
                var odd = "odd";
                var arr = makeArrayEvenOdd(even, odd, 10);
                var result = $$Array.partitionIndexEvenOdd(arr);
                Vitest$1.describe("all evens are even", (function (param) {
                        Vitest$1.test("returns evens", (function (param) {
                                Vitest$1.expect($$Array.every(result.even, (function (x) {
                                              return $$String.includes(x, even);
                                            }))).toBe(true);
                              }));
                        Vitest$1.test("returns odds", (function (param) {
                                Vitest$1.expect($$Array.every(result.odd, (function (x) {
                                              return $$String.includes(x, odd);
                                            }))).toBe(true);
                              }));
                      }));
              }));
        Vitest$1.describe("#cross", (function (param) {
                Vitest$1.describe("For two arrays", (function (param) {
                        var xs = $$Array.range(3);
                        var ys = $$Array.range(5);
                        var cross = $$Array.cross(xs, ys);
                        Vitest$1.test("has length lenX * lenY", (function (param) {
                                Vitest$1.expect($$Array.length(cross)).toEqual(15);
                              }));
                        Vitest$1.test(" each x appears lenY times", (function (param) {
                                $$Array.forEach(xs, (function (x) {
                                        var count = $$Array.length($$Array.filter(cross, (function (param) {
                                                    return param[0] === x;
                                                  })));
                                        Vitest$1.expect(count).toEqual(5);
                                      }));
                              }));
                        Vitest$1.test(" each y appears lenX times", (function (param) {
                                $$Array.forEach(ys, (function (y) {
                                        var count = $$Array.length($$Array.filter(cross, (function (param) {
                                                    return param[1] === y;
                                                  })));
                                        Vitest$1.expect(count).toEqual(3);
                                      }));
                              }));
                      }));
              }));
        Vitest$1.describe("#splitAt", (function (param) {
                Vitest$1.describe("empty", (function (param) {
                        var arr = [];
                        var index = [
                          -1,
                          0,
                          666
                        ];
                        $$Array.forEach(index, (function (index) {
                                Vitest$1.describe("at any index e.g. " + Int.toString(index) + "", (function (param) {
                                        Vitest$1.test("returns two empty arrays", (function (param) {
                                                Vitest$1.expect($$Array.splitAt(arr, index)).toEqual([
                                                      [],
                                                      []
                                                    ]);
                                              }));
                                      }));
                              }));
                      }));
                Vitest$1.describe("one element", (function (param) {
                        var arr = ["haha"];
                        Vitest$1.describe("outside index", (function (param) {
                                Vitest$1.test("returns empty array in left", (function (param) {
                                        Vitest$1.expect($$Array.splitAt(arr, 666)).toEqual([
                                              ["haha"],
                                              []
                                            ]);
                                      }));
                              }));
                      }));
                Vitest$1.describe("many element", (function (param) {
                        var arr = [
                          "haha",
                          "hehe",
                          "hoho"
                        ];
                        Vitest$1.describe("index zero", (function (param) {
                                Vitest$1.test("returns empty array in left", (function (param) {
                                        Vitest$1.expect($$Array.splitAt(arr, 0)).toEqual([
                                              [],
                                              arr
                                            ]);
                                      }));
                              }));
                        Vitest$1.describe("index one", (function (param) {
                                Vitest$1.test("returns one element in left", (function (param) {
                                        Vitest$1.expect($$Array.splitAt(arr, 1)).toEqual([
                                              ["haha"],
                                              [
                                                "hehe",
                                                "hoho"
                                              ]
                                            ]);
                                      }));
                              }));
                        Vitest$1.describe("index outside", (function (param) {
                                Vitest$1.test("returns empty array in right", (function (param) {
                                        Vitest$1.expect($$Array.splitAt(arr, 666)).toEqual([
                                              arr,
                                              []
                                            ]);
                                      }));
                              }));
                      }));
              }));
        Vitest$1.describe("#intercalate", (function (param) {
                var inserted = "zzz";
                Vitest$1.describe("empty", (function (param) {
                        var arr = [];
                        var result = $$Array.intercalate(arr, inserted);
                        Vitest$1.test("returns source", (function (param) {
                                Vitest$1.expect(arr).toEqual(result);
                              }));
                      }));
                Vitest$1.describe("one element", (function (param) {
                        var arr = ["a"];
                        var result = $$Array.intercalate(arr, inserted);
                        Vitest$1.test("returns source", (function (param) {
                                Vitest$1.expect(arr).toEqual(result);
                              }));
                      }));
                Vitest$1.describe("non-empty", (function (param) {
                        var arrays = [
                          [
                            "two element",
                            [
                              "a",
                              "b"
                            ]
                          ],
                          [
                            "many element",
                            [
                              "a",
                              "b",
                              "c",
                              "d",
                              "e"
                            ]
                          ]
                        ];
                        $$Array.forEach(arrays, (function (param) {
                                var arr = param[1];
                                Vitest$1.describe(param[0], (function (param) {
                                        var result = $$Array.intercalate(arr, inserted);
                                        var match = $$Array.partitionIndexEvenOdd(result);
                                        var odd = match.odd;
                                        var even = match.even;
                                        Vitest$1.test("odd indexes equals source", (function (param) {
                                                Vitest$1.expect(odd).toEqual(arr);
                                              }));
                                        Vitest$1.test("even indexes all equal inserted", (function (param) {
                                                Vitest$1.expect($$Array.every(even, (function (x) {
                                                              return x === inserted;
                                                            }))).toBeTruthy();
                                              }));
                                      }));
                              }));
                      }));
              }));
        Vitest$1.describe("#replace", (function (param) {
                Vitest$1.describe("empty", (function (param) {
                        var arr = [];
                        var result = $$Array.replace(arr, 666, 0);
                        Vitest$1.test("returns source", (function (param) {
                                Vitest$1.expect(arr).toEqual(result);
                              }));
                      }));
                Vitest$1.describe("non-empty", (function (param) {
                        var arrays = [
                          [
                            "one element",
                            [1]
                          ],
                          [
                            "two element",
                            [
                              1,
                              2
                            ]
                          ],
                          [
                            "many element",
                            [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          ]
                        ];
                        $$Array.forEach(arrays, (function (param) {
                                var arr = param[1];
                                Vitest$1.describe(param[0], (function (param) {
                                        Vitest$1.describe("negative index", (function (param) {
                                                var result = $$Array.replace(arr, 666, -1);
                                                Vitest$1.test("returns source", (function (param) {
                                                        Vitest$1.expect(arr).toEqual(result);
                                                      }));
                                              }));
                                        Vitest$1.describe("> length", (function (param) {
                                                var index = $$Array.length(arr);
                                                var result = $$Array.replace(arr, 666, index);
                                                Vitest$1.test("returns source", (function (param) {
                                                        Vitest$1.expect(arr).toEqual(result);
                                                      }));
                                              }));
                                        var indices = [
                                          0,
                                          $$Array.length(arr) - 1 | 0,
                                          $$Array.length(arr) / 2 | 0
                                        ];
                                        $$Array.forEach(indices, (function (index) {
                                                Vitest$1.describe("replace " + Int.toString(index) + "", (function (param) {
                                                        var result = $$Array.replace(arr, 666, index);
                                                        Vitest$1.test("does not mutate source", (function (param) {
                                                                Vitest$1.expect($$Array.getUnsafe(arr, index)).not.toEqual(666);
                                                              }));
                                                        Vitest$1.test("replaces index", (function (param) {
                                                                Vitest$1.expect($$Array.getUnsafe(result, index)).toEqual(666);
                                                              }));
                                                        Vitest$1.test("maintains length", (function (param) {
                                                                Vitest$1.expect($$Array.length(result)).toEqual($$Array.length(result));
                                                              }));
                                                      }));
                                              }));
                                      }));
                              }));
                      }));
              }));
        Vitest$1.describe("#insert", (function (param) {
                var element = "666";
                Vitest$1.describe("empty", (function (param) {
                        var arr = [];
                        Vitest$1.describe("zero", (function (param) {
                                var result = $$Array.insert(arr, element, 0);
                                Vitest$1.test("returns insert", (function (param) {
                                        Vitest$1.expect([element]).toEqual(result);
                                      }));
                              }));
                        Vitest$1.describe("non-zero", (function (param) {
                                var result = $$Array.insert(arr, element, 4);
                                Vitest$1.test("returns source", (function (param) {
                                        Vitest$1.expect(arr).toEqual(result);
                                      }));
                              }));
                      }));
                Vitest$1.describe("non-empty", (function (param) {
                        var arrays = [
                          [
                            "two element",
                            [
                              "a",
                              "b"
                            ]
                          ],
                          [
                            "many element",
                            [
                              "a",
                              "b",
                              "c",
                              "d",
                              "e"
                            ]
                          ]
                        ];
                        $$Array.forEach(arrays, (function (param) {
                                var arr = param[1];
                                Vitest$1.describe(param[0], (function (param) {
                                        Vitest$1.describe("negative index", (function (param) {
                                                var result = $$Array.insert(arr, element, -1);
                                                Vitest$1.test("returns source", (function (param) {
                                                        Vitest$1.expect(arr).toEqual(result);
                                                      }));
                                              }));
                                        Vitest$1.describe("> length", (function (param) {
                                                var index = $$Array.length(arr);
                                                var result = $$Array.insert(arr, element, index);
                                                Vitest$1.test("returns source", (function (param) {
                                                        Vitest$1.expect(arr).toEqual(result);
                                                      }));
                                              }));
                                        var indices = [
                                          0,
                                          $$Array.length(arr) - 1 | 0,
                                          $$Array.length(arr) / 2 | 0
                                        ];
                                        $$Array.forEach(indices, (function (index) {
                                                Vitest$1.describe("insert " + Int.toString(index) + "", (function (param) {
                                                        var result = $$Array.insert(arr, element, index);
                                                        Vitest$1.test("does not mutate source", (function (param) {
                                                                Vitest$1.expect(arr).not.toEqual(result);
                                                              }));
                                                        Vitest$1.test("inserts element", (function (param) {
                                                                Vitest$1.expect($$Array.get(result, index)).toEqual(element);
                                                              }));
                                                        Vitest$1.test("moves index element rightward", (function (param) {
                                                                Vitest$1.expect($$Array.get(result, index + 1 | 0)).toEqual($$Array.get(arr, index));
                                                              }));
                                                        Vitest$1.test("increases length by 1", (function (param) {
                                                                Vitest$1.expect($$Array.length(result)).toEqual($$Array.length(arr) + 1 | 0);
                                                              }));
                                                      }));
                                              }));
                                      }));
                              }));
                      }));
              }));
        Vitest$1.describe("#remove", (function (param) {
                Vitest$1.describe("non-empty", (function (param) {
                        var arrays = [
                          [
                            "two element",
                            [
                              "a",
                              "b"
                            ]
                          ],
                          [
                            "many element",
                            [
                              "a",
                              "b",
                              "c",
                              "d",
                              "e"
                            ]
                          ]
                        ];
                        $$Array.forEach(arrays, (function (param) {
                                var arr = param[1];
                                Vitest$1.describe(param[0], (function (param) {
                                        Vitest$1.describe("negative index", (function (param) {
                                                var result = $$Array.remove(arr, -1);
                                                Vitest$1.test("returns source", (function (param) {
                                                        Vitest$1.expect(arr).toEqual(result);
                                                      }));
                                              }));
                                        Vitest$1.describe("> length", (function (param) {
                                                var index = $$Array.length(arr) + 5 | 0;
                                                var result = $$Array.remove(arr, index);
                                                Vitest$1.test("returns source", (function (param) {
                                                        Vitest$1.expect(arr).toEqual(result);
                                                      }));
                                              }));
                                      }));
                              }));
                      }));
              }));
        Vitest$1.describe("#generateCombinations", (function (param) {
                Vitest$1.describe("empty", (function (param) {
                        var arr = [];
                        var begin = [];
                        var result = $$Array.generateCombinations(arr, begin, 3);
                        Vitest$1.test("returns empty", (function (param) {
                                Vitest$1.expect(result).toEqual([]);
                              }));
                      }));
                Vitest$1.describe("size = 0", (function (param) {
                        var arr = [
                          0,
                          1,
                          2,
                          3,
                          4
                        ];
                        var begin = [];
                        var result = $$Array.generateCombinations(arr, begin, 0);
                        Vitest$1.test("returns nested empty", (function (param) {
                                Vitest$1.expect(result).toEqual([[]]);
                              }));
                      }));
                Vitest$1.describe("size = 3", (function (param) {
                        var arr = [
                          0,
                          1,
                          2,
                          3,
                          4
                        ];
                        var begin = [];
                        var expectedCombinations = [
                          [
                            0,
                            1,
                            2
                          ],
                          [
                            0,
                            1,
                            3
                          ],
                          [
                            0,
                            1,
                            4
                          ],
                          [
                            0,
                            2,
                            3
                          ],
                          [
                            0,
                            2,
                            4
                          ],
                          [
                            0,
                            3,
                            4
                          ],
                          [
                            1,
                            2,
                            3
                          ],
                          [
                            1,
                            2,
                            4
                          ],
                          [
                            1,
                            3,
                            4
                          ],
                          [
                            2,
                            3,
                            4
                          ]
                        ];
                        var result = $$Array.generateCombinations(arr, begin, 3);
                        Vitest$1.test("returns combinations of fixed size = 3", (function (param) {
                                Vitest$1.expect(result).toEqual(expectedCombinations);
                              }));
                      }));
              }));
      }));

export {
  makeArrayEvenOdd ,
}
/*  Not a pure module */
