// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "./Array.bs.js";
import * as Float from "./Float.bs.js";
import * as $$Option from "./Option.bs.js";
import * as Lodash from "lodash";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

function splitAt(str, i) {
  var a = str.slice(0, i);
  var b = str.slice(i, str.length);
  return [
          a,
          b
        ];
}

function capitalize(str) {
  var firstLetter = str.slice(0, 1).toUpperCase();
  var remainingLetters = str.slice(1);
  return firstLetter.concat(remainingLetters);
}

function compare(a, b) {
  if (a > b) {
    return 1;
  } else if (a < b) {
    return -1;
  } else {
    return 0;
  }
}

function shortenLargeString(str, maxOpt, param) {
  var max = maxOpt !== undefined ? maxOpt : 255;
  var stringLength = str.length;
  if (stringLength > max) {
    return "" + str.substr(0, max) + "...";
  } else {
    return str;
  }
}

function prettyOptions(arr) {
  var len = arr.length;
  if (len === 1) {
    return arr[0];
  }
  if (len === 0) {
    return "";
  }
  var length = $$Array.length(arr);
  var last = $$Option.getExn($$Array.get(arr, length - 1 | 0), "prettyOptions last");
  var rest = $$Array.slice(arr, 0, length - 1 | 0);
  return "" + $$Array.joinWith(rest, ", ") + " or " + last + "";
}

function getRandomString(param) {
  return Float.toStringWithRadix(Float.random(undefined), 36).slice(0, 2);
}

function makeUniq(str, separator) {
  return $$Array.joinWith(Lodash.uniq(str.split(separator)), separator);
}

function splitByComma(str) {
  return str.replace(/\s/g, "").split(",");
}

function stringToId(str) {
  return $$Array.joinWith(str.split(" "), "_");
}

function includes(prim0, prim1) {
  return prim0.includes(prim1);
}

function split(prim0, prim1) {
  return prim0.split(prim1);
}

function concat(prim0, prim1) {
  return prim0.concat(prim1);
}

function replaceByRe(prim0, prim1, prim2) {
  return prim0.replace(prim1, prim2);
}

function endsWith(prim0, prim1) {
  return prim0.endsWith(prim1);
}

function concatMany(prim0, prim1) {
  return Caml_splice_call.spliceObjApply(prim0, "concat", [prim1]);
}

function toLowerCase(prim) {
  return prim.toLowerCase();
}

function toUpperCase(prim) {
  return prim.toUpperCase();
}

function length(prim) {
  return prim.length;
}

function make(prim) {
  return String(prim);
}

function replace(prim0, prim1, prim2) {
  return prim0.replace(prim1, prim2);
}

function match_(prim0, prim1) {
  return Caml_option.null_to_opt(prim0.match(prim1));
}

function charAt(prim0, prim1) {
  return prim0.charAt(prim1);
}

function slice(prim0, prim1, prim2) {
  return prim0.slice(prim1, prim2);
}

function trim(prim) {
  return prim.trim();
}

function get(prim0, prim1) {
  return prim0[prim1];
}

function startsWith(prim0, prim1) {
  return prim0.startsWith(prim1);
}

function sliceToEnd(prim0, prim1) {
  return prim0.slice(prim1);
}

function indexOf(prim0, prim1) {
  return prim0.indexOf(prim1);
}

export {
  splitAt ,
  capitalize ,
  compare ,
  shortenLargeString ,
  prettyOptions ,
  getRandomString ,
  makeUniq ,
  splitByComma ,
  stringToId ,
  includes ,
  split ,
  concat ,
  replaceByRe ,
  endsWith ,
  concatMany ,
  toLowerCase ,
  toUpperCase ,
  length ,
  make ,
  replace ,
  match_ ,
  charAt ,
  slice ,
  trim ,
  get ,
  startsWith ,
  sliceToEnd ,
  indexOf ,
}
/* Float Not a pure module */
