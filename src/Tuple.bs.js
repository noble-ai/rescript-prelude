// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "./Array.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";

function fst2(param) {
  return param[0];
}

function snd2(param) {
  return param[1];
}

function mapl2(f, param) {
  return [
          Curry._1(f, param[0]),
          param[1]
        ];
}

function mapr2(f, param) {
  return [
          param[0],
          Curry._1(f, param[1])
        ];
}

function return2(a) {
  return [
          a,
          a
        ];
}

function return3(a) {
  return [
          a,
          a,
          a
        ];
}

function return4(a) {
  return [
          a,
          a,
          a,
          a
        ];
}

function return5(a) {
  return [
          a,
          a,
          a,
          a,
          a
        ];
}

function return6(a) {
  return [
          a,
          a,
          a,
          a,
          a,
          a
        ];
}

function return7(a) {
  return [
          a,
          a,
          a,
          a,
          a,
          a,
          a
        ];
}

function curry2(fn, a, b) {
  return Curry._1(fn, [
              a,
              b
            ]);
}

function curry3(fn, a, b, c) {
  return Curry._1(fn, [
              a,
              b,
              c
            ]);
}

function curry4(fn, a, b, c, d) {
  return Curry._1(fn, [
              a,
              b,
              c,
              d
            ]);
}

function curry5(fn, a, b, c, d, e) {
  return Curry._1(fn, [
              a,
              b,
              c,
              d,
              e
            ]);
}

function curry6(fn, a, b, c, d, e, f) {
  return Curry._1(fn, [
              a,
              b,
              c,
              d,
              e,
              f
            ]);
}

function curry7(fn, a, b, c, d, e, f, g) {
  return Curry._1(fn, [
              a,
              b,
              c,
              d,
              e,
              f,
              g
            ]);
}

function uncurry2(fn, param) {
  return Curry._2(fn, param[0], param[1]);
}

function uncurry3(fn, param) {
  return Curry._3(fn, param[0], param[1], param[2]);
}

function uncurry4(fn, param) {
  return Curry._4(fn, param[0], param[1], param[2], param[3]);
}

function uncurry5(fn, param) {
  return Curry._5(fn, param[0], param[1], param[2], param[3], param[4]);
}

function uncurry6(fn, param) {
  return Curry._6(fn, param[0], param[1], param[2], param[3], param[4], param[5]);
}

function uncurry7(fn, param) {
  return Curry._7(fn, param[0], param[1], param[2], param[3], param[4], param[5], param[6]);
}

function toList2(param) {
  return [
          param[0],
          param[1]
        ];
}

function toList3(param) {
  return [
          param[0],
          param[1],
          param[2]
        ];
}

function toList4(param) {
  return [
          param[0],
          param[1],
          param[2],
          param[3]
        ];
}

function toList5(param) {
  return [
          param[0],
          param[1],
          param[2],
          param[3],
          param[4]
        ];
}

function toList6(param) {
  return [
          param[0],
          param[1],
          param[2],
          param[3],
          param[4],
          param[5]
        ];
}

function toList7(param) {
  return [
          param[0],
          param[1],
          param[2],
          param[3],
          param[4],
          param[5],
          param[6]
        ];
}

function napply2(param, param$1) {
  return [
          Curry._1(param[0], param$1[0]),
          Curry._1(param[1], param$1[1])
        ];
}

function napply3(param, param$1) {
  return [
          Curry._1(param[0], param$1[0]),
          Curry._1(param[1], param$1[1]),
          Curry._1(param[2], param$1[2])
        ];
}

function napply4(param, param$1) {
  return [
          Curry._1(param[0], param$1[0]),
          Curry._1(param[1], param$1[1]),
          Curry._1(param[2], param$1[2]),
          Curry._1(param[3], param$1[3])
        ];
}

function napply5(param, param$1) {
  return [
          Curry._1(param[0], param$1[0]),
          Curry._1(param[1], param$1[1]),
          Curry._1(param[2], param$1[2]),
          Curry._1(param[3], param$1[3]),
          Curry._1(param[4], param$1[4])
        ];
}

function napply6(param, param$1) {
  return [
          Curry._1(param[0], param$1[0]),
          Curry._1(param[1], param$1[1]),
          Curry._1(param[2], param$1[2]),
          Curry._1(param[3], param$1[3]),
          Curry._1(param[4], param$1[4]),
          Curry._1(param[5], param$1[5])
        ];
}

function napply7(param, param$1) {
  return [
          Curry._1(param[0], param$1[0]),
          Curry._1(param[1], param$1[1]),
          Curry._1(param[2], param$1[2]),
          Curry._1(param[3], param$1[3]),
          Curry._1(param[4], param$1[4]),
          Curry._1(param[5], param$1[5]),
          Curry._1(param[6], param$1[6])
        ];
}

function ncompose2(param, param$1, x) {
  var gb = param$1[1];
  var fb = param[1];
  return [
          Curry._1(param[0], Curry._1(param$1[0], x)),
          (function (y) {
              return Curry._1(fb, Curry._1(gb, y));
            })
        ];
}

function ncompose3(param, param$1, x) {
  var gc = param$1[2];
  var gb = param$1[1];
  var fc = param[2];
  var fb = param[1];
  return [
          Curry._1(param[0], Curry._1(param$1[0], x)),
          (function (y) {
              return Curry._1(fb, Curry._1(gb, y));
            }),
          (function (z) {
              return Curry._1(fc, Curry._1(gc, z));
            })
        ];
}

function ncompose4(param, param$1, w) {
  var gd = param$1[3];
  var gc = param$1[2];
  var gb = param$1[1];
  var fd = param[3];
  var fc = param[2];
  var fb = param[1];
  return [
          Curry._1(param[0], Curry._1(param$1[0], w)),
          (function (x) {
              return Curry._1(fb, Curry._1(gb, x));
            }),
          (function (y) {
              return Curry._1(fc, Curry._1(gc, y));
            }),
          (function (z) {
              return Curry._1(fd, Curry._1(gd, z));
            })
        ];
}

function ncompose5(param, param$1, v) {
  var ge = param$1[4];
  var gd = param$1[3];
  var gc = param$1[2];
  var gb = param$1[1];
  var fe = param[4];
  var fd = param[3];
  var fc = param[2];
  var fb = param[1];
  return [
          Curry._1(param[0], Curry._1(param$1[0], v)),
          (function (w) {
              return Curry._1(fb, Curry._1(gb, w));
            }),
          (function (x) {
              return Curry._1(fc, Curry._1(gc, x));
            }),
          (function (y) {
              return Curry._1(fd, Curry._1(gd, y));
            }),
          (function (z) {
              return Curry._1(fe, Curry._1(ge, z));
            })
        ];
}

function ncompose6(param, param$1, u) {
  var gf = param$1[5];
  var ge = param$1[4];
  var gd = param$1[3];
  var gc = param$1[2];
  var gb = param$1[1];
  var ff = param[5];
  var fe = param[4];
  var fd = param[3];
  var fc = param[2];
  var fb = param[1];
  return [
          Curry._1(param[0], Curry._1(param$1[0], u)),
          (function (v) {
              return Curry._1(fb, Curry._1(gb, v));
            }),
          (function (w) {
              return Curry._1(fc, Curry._1(gc, w));
            }),
          (function (x) {
              return Curry._1(fd, Curry._1(gd, x));
            }),
          (function (y) {
              return Curry._1(fe, Curry._1(ge, y));
            }),
          (function (z) {
              return Curry._1(ff, Curry._1(gf, z));
            })
        ];
}

function ncompose7(param, param$1, t) {
  var gg = param$1[6];
  var gf = param$1[5];
  var ge = param$1[4];
  var gd = param$1[3];
  var gc = param$1[2];
  var gb = param$1[1];
  var fg = param[6];
  var ff = param[5];
  var fe = param[4];
  var fd = param[3];
  var fc = param[2];
  var fb = param[1];
  return [
          Curry._1(param[0], Curry._1(param$1[0], t)),
          (function (u) {
              return Curry._1(fb, Curry._1(gb, u));
            }),
          (function (v) {
              return Curry._1(fc, Curry._1(gc, v));
            }),
          (function (w) {
              return Curry._1(fd, Curry._1(gd, w));
            }),
          (function (x) {
              return Curry._1(fe, Curry._1(ge, x));
            }),
          (function (y) {
              return Curry._1(ff, Curry._1(gf, y));
            }),
          (function (z) {
              return Curry._1(fg, Curry._1(gg, z));
            })
        ];
}

function reverse2(param) {
  return [
          param[1],
          param[0]
        ];
}

function reverse3(param) {
  return [
          param[2],
          param[1],
          param[0]
        ];
}

function reverse4(param) {
  return [
          param[3],
          param[2],
          param[1],
          param[0]
        ];
}

function reverse5(param) {
  return [
          param[4],
          param[3],
          param[2],
          param[1],
          param[0]
        ];
}

function reverse6(param) {
  return [
          param[5],
          param[4],
          param[3],
          param[2],
          param[1],
          param[0]
        ];
}

function reverse7(param) {
  return [
          param[6],
          param[5],
          param[4],
          param[3],
          param[2],
          param[1],
          param[0]
        ];
}

function mono(napply, toList, f, t) {
  return Curry._1(toList, Curry._2(napply, f, t));
}

function all(napply, toList, f, t) {
  return $$Array.all(Curry._1(toList, Curry._2(napply, f, t)), (function (x) {
                return x;
              }));
}

function some(napply, toList, f, t) {
  return $$Array.some(Curry._1(toList, Curry._2(napply, f, t)), (function (x) {
                return x;
              }));
}

function make(a, b) {
  return [
          a,
          b
        ];
}

function show(param) {
  return "(" + param[0] + ", " + param[1] + ")";
}

function mono$1(f, t) {
  return toList2(napply2(f, t));
}

function all$1(f, t) {
  return $$Array.all(toList2(napply2(f, t)), (function (x) {
                return x;
              }));
}

function some$1(f, t) {
  return $$Array.some(toList2(napply2(f, t)), (function (x) {
                return x;
              }));
}

function get1(param) {
  return param[0];
}

function get2(param) {
  return param[1];
}

var Tuple2 = {
  make: make,
  uncurry: uncurry2,
  curry: curry2,
  $$return: return2,
  toList: toList2,
  napply: napply2,
  ncompose: ncompose2,
  show: show,
  mono: mono$1,
  all: all$1,
  some: some$1,
  get1: get1,
  get2: get2
};

function make$1(a, b, c) {
  return [
          a,
          b,
          c
        ];
}

function show$1(param) {
  return "(" + param[0] + ", " + param[1] + ", " + param[2] + ")";
}

function mono$2(f, t) {
  return toList3(napply3(f, t));
}

function all$2(f, t) {
  return $$Array.all(toList3(napply3(f, t)), (function (x) {
                return x;
              }));
}

function some$2(f, t) {
  return $$Array.some(toList3(napply3(f, t)), (function (x) {
                return x;
              }));
}

function get1$1(param) {
  return param[0];
}

function get2$1(param) {
  return param[1];
}

function get3(param) {
  return param[2];
}

var Tuple3 = {
  make: make$1,
  uncurry: uncurry3,
  curry: curry3,
  $$return: return3,
  toList: toList3,
  napply: napply3,
  ncompose: ncompose3,
  show: show$1,
  mono: mono$2,
  all: all$2,
  some: some$2,
  get1: get1$1,
  get2: get2$1,
  get3: get3
};

function make$2(a, b, c, d) {
  return [
          a,
          b,
          c,
          d
        ];
}

function show$2(param) {
  return "(" + param[0] + ", " + param[1] + ", " + param[2] + ", " + param[3] + ")";
}

function mono$3(f, t) {
  return toList4(napply4(f, t));
}

function all$3(f, t) {
  return $$Array.all(toList4(napply4(f, t)), (function (x) {
                return x;
              }));
}

function some$3(f, t) {
  return $$Array.some(toList4(napply4(f, t)), (function (x) {
                return x;
              }));
}

function get1$2(param) {
  return param[0];
}

function get2$2(param) {
  return param[1];
}

function get3$1(param) {
  return param[2];
}

function get4(param) {
  return param[3];
}

var Tuple4 = {
  make: make$2,
  uncurry: uncurry4,
  curry: curry4,
  $$return: return4,
  toList: toList4,
  napply: napply4,
  ncompose: ncompose4,
  show: show$2,
  mono: mono$3,
  all: all$3,
  some: some$3,
  get1: get1$2,
  get2: get2$2,
  get3: get3$1,
  get4: get4
};

function make$3(a, b, c, d, e) {
  return [
          a,
          b,
          c,
          d,
          e
        ];
}

function show$3(param) {
  return "(" + param[0] + ", " + param[1] + ", " + param[2] + ", " + param[3] + ", " + param[4] + ")";
}

function mono$4(f, t) {
  return toList5(napply5(f, t));
}

function all$4(f, t) {
  return $$Array.all(toList5(napply5(f, t)), (function (x) {
                return x;
              }));
}

function some$4(f, t) {
  return $$Array.some(toList5(napply5(f, t)), (function (x) {
                return x;
              }));
}

function get1$3(param) {
  return param[0];
}

function get2$3(param) {
  return param[1];
}

function get3$2(param) {
  return param[2];
}

function get4$1(param) {
  return param[3];
}

function get5(param) {
  return param[4];
}

var Tuple5 = {
  make: make$3,
  uncurry: uncurry5,
  curry: curry5,
  $$return: return5,
  toList: toList5,
  napply: napply5,
  ncompose: ncompose5,
  show: show$3,
  mono: mono$4,
  all: all$4,
  some: some$4,
  get1: get1$3,
  get2: get2$3,
  get3: get3$2,
  get4: get4$1,
  get5: get5
};

function make$4(a, b, c, d, e, f) {
  return [
          a,
          b,
          c,
          d,
          e,
          f
        ];
}

function show$4(param) {
  return "(" + param[0] + ", " + param[1] + ", " + param[2] + ", " + param[3] + ", " + param[4] + ", " + param[5] + ")";
}

function mono$5(f, t) {
  return toList6(napply6(f, t));
}

function all$5(f, t) {
  return $$Array.all(toList6(napply6(f, t)), (function (x) {
                return x;
              }));
}

function some$5(f, t) {
  return $$Array.some(toList6(napply6(f, t)), (function (x) {
                return x;
              }));
}

function get1$4(param) {
  return param[0];
}

function get2$4(param) {
  return param[1];
}

function get3$3(param) {
  return param[2];
}

function get4$2(param) {
  return param[3];
}

function get5$1(param) {
  return param[4];
}

function get6(param) {
  return param[5];
}

var Tuple6 = {
  make: make$4,
  uncurry: uncurry6,
  curry: curry6,
  $$return: return6,
  toList: toList6,
  napply: napply6,
  ncompose: ncompose6,
  show: show$4,
  mono: mono$5,
  all: all$5,
  some: some$5,
  get1: get1$4,
  get2: get2$4,
  get3: get3$3,
  get4: get4$2,
  get5: get5$1,
  get6: get6
};

function make$5(a, b, c, d, e, f, g) {
  return [
          a,
          b,
          c,
          d,
          e,
          f,
          g
        ];
}

function show$5(param) {
  return "(" + param[0] + ", " + param[1] + ", " + param[2] + ", " + param[3] + ", " + param[4] + ", " + param[5] + ", " + param[6] + ")";
}

function mono$6(f, t) {
  return toList7(napply7(f, t));
}

function all$6(f, t) {
  return $$Array.all(toList7(napply7(f, t)), (function (x) {
                return x;
              }));
}

function some$6(f, t) {
  return $$Array.some(toList7(napply7(f, t)), (function (x) {
                return x;
              }));
}

function get1$5(param) {
  return param[0];
}

function get2$5(param) {
  return param[1];
}

function get3$4(param) {
  return param[2];
}

function get4$3(param) {
  return param[3];
}

function get5$2(param) {
  return param[4];
}

function get6$1(param) {
  return param[5];
}

function get7(param) {
  return param[6];
}

var Tuple7 = {
  make: make$5,
  uncurry: uncurry7,
  curry: curry7,
  $$return: return7,
  toList: toList7,
  napply: napply7,
  ncompose: ncompose7,
  show: show$5,
  mono: mono$6,
  all: all$6,
  some: some$6,
  get1: get1$5,
  get2: get2$5,
  get3: get3$4,
  get4: get4$3,
  get5: get5$2,
  get6: get6$1,
  get7: get7
};

function t2(a, z) {
  return [
          a,
          z
        ];
}

function t3(a, b, z) {
  return [
          a,
          [
            b,
            z
          ]
        ];
}

function t4(a, b, c, z) {
  return [
          a,
          [
            b,
            [
              c,
              z
            ]
          ]
        ];
}

function t5(a, b, c, d, z) {
  return [
          a,
          [
            b,
            [
              c,
              [
                d,
                z
              ]
            ]
          ]
        ];
}

function t6(a, b, c, d, e, z) {
  return [
          a,
          [
            b,
            [
              c,
              [
                d,
                [
                  e,
                  z
                ]
              ]
            ]
          ]
        ];
}

function t7(a, b, c, d, e, f, z) {
  return [
          a,
          [
            b,
            [
              c,
              [
                d,
                [
                  e,
                  [
                    f,
                    z
                  ]
                ]
              ]
            ]
          ]
        ];
}

function t8(a, b, c, d, e, f, g, z) {
  return [
          a,
          [
            b,
            [
              c,
              [
                d,
                [
                  e,
                  [
                    f,
                    [
                      g,
                      z
                    ]
                  ]
                ]
              ]
            ]
          ]
        ];
}

function t9(a, b, c, d, e, f, g, h, z) {
  return [
          a,
          [
            b,
            [
              c,
              [
                d,
                [
                  e,
                  [
                    f,
                    [
                      g,
                      [
                        h,
                        z
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ];
}

function rest(param) {
  return param[1];
}

function get1$6(param) {
  return param[0];
}

function get2$6(param) {
  return param[1][0];
}

function get3$5(param) {
  return get2$6(param[1]);
}

function get4$4(param) {
  return get3$5(param[1]);
}

function get5$3(param) {
  return get4$4(param[1]);
}

function get6$2(param) {
  return get5$3(param[1]);
}

function get7$1(param) {
  return get6$2(param[1]);
}

function set1(param, b) {
  return [
          b,
          param[1]
        ];
}

function set2(param, c) {
  return [
          param[0],
          set1(param[1], c)
        ];
}

function set3(param, d) {
  return [
          param[0],
          set2(param[1], d)
        ];
}

function set4(param, e) {
  return [
          param[0],
          set3(param[1], e)
        ];
}

function set5(param, f) {
  return [
          param[0],
          set4(param[1], f)
        ];
}

function set6(param, g) {
  return [
          param[0],
          set5(param[1], g)
        ];
}

function set7(param, h) {
  return [
          param[0],
          set6(param[1], h)
        ];
}

function make$6(a) {
  return [
          a,
          undefined
        ];
}

var units = [
  undefined,
  undefined
];

function over1(fn, param) {
  return [
          Curry._1(fn, param[0]),
          param[1]
        ];
}

function uncurry(fn, param) {
  return Curry._1(fn, param[0]);
}

function curry(fn, a) {
  return Curry._1(fn, [
              a,
              undefined
            ]);
}

function $$return(a) {
  return [
          a,
          undefined
        ];
}

function toList(param) {
  return [param[0]];
}

function napply(param, param$1) {
  return [
          Curry._1(param[0], param$1[0]),
          undefined
        ];
}

function ncompose(param, param$1) {
  var ga = param$1[0];
  var fa = param[0];
  return [
          (function (a) {
              return Curry._1(fa, Curry._1(ga, a));
            }),
          undefined
        ];
}

function show$6(param) {
  return "(" + param[0] + ")";
}

function encode(a) {
  return [
          a,
          undefined
        ];
}

function decode(param) {
  return param[0];
}

function mono$7(f, t) {
  return toList(napply(f, t));
}

function all$7(f, t) {
  return $$Array.all(toList(napply(f, t)), (function (x) {
                return x;
              }));
}

function some$7(f, t) {
  return $$Array.some(toList(napply(f, t)), (function (x) {
                return x;
              }));
}

var Tuple1 = {
  make: make$6,
  units: units,
  over1: over1,
  uncurry: uncurry,
  curry: curry,
  $$return: $$return,
  toList: toList,
  napply: napply,
  ncompose: ncompose,
  show: show$6,
  encode: encode,
  decode: decode,
  mono: mono$7,
  all: all$7,
  some: some$7,
  set1: set1,
  get1: get1$6
};

function make$7(a, b) {
  return [
          a,
          [
            b,
            undefined
          ]
        ];
}

var units$1 = [
  undefined,
  units
];

function over(fn, param) {
  var match = param[1];
  return [
          param[0],
          [
            Curry._1(fn, match[0]),
            match[1]
          ]
        ];
}

function uncurry$1(fn, param) {
  return Curry._2(fn, param[0], param[1][0]);
}

function curry$1(fn, a, b) {
  return Curry._1(fn, [
              a,
              [
                b,
                undefined
              ]
            ]);
}

function encode$1(param) {
  return [
          param[0],
          [
            param[1],
            undefined
          ]
        ];
}

function decode$1(param) {
  return [
          param[0],
          param[1][0]
        ];
}

function $$return$1(a) {
  return [
          a,
          [
            a,
            undefined
          ]
        ];
}

function toList$1(param) {
  return [
          param[0],
          param[1][0]
        ];
}

function napply$1(param, param$1) {
  var b = Curry._1(param[1][0], param$1[1][0]);
  var a = Curry._1(param[0], param$1[0]);
  return [
          a,
          [
            b,
            undefined
          ]
        ];
}

function ncompose$1(param, param$1) {
  var gb = param$1[1][0];
  var ga = param$1[0];
  var fb = param[1][0];
  var fa = param[0];
  return [
          (function (a) {
              return Curry._1(fa, Curry._1(ga, a));
            }),
          [
            (function (b) {
                return Curry._1(fb, Curry._1(gb, b));
              }),
            undefined
          ]
        ];
}

function reverse(param) {
  return [
          param[1][0],
          [
            param[0],
            undefined
          ]
        ];
}

function show$7(param) {
  return "(" + param[0] + ", " + param[1][0] + ")";
}

function mono$8(f, t) {
  return toList$1(napply$1(f, t));
}

function all$8(f, t) {
  return $$Array.all(toList$1(napply$1(f, t)), (function (x) {
                return x;
              }));
}

function some$8(f, t) {
  return $$Array.some(toList$1(napply$1(f, t)), (function (x) {
                return x;
              }));
}

var Tuple2$1 = {
  make: make$7,
  units: units$1,
  over: over,
  uncurry: uncurry$1,
  curry: curry$1,
  encode: encode$1,
  decode: decode$1,
  $$return: $$return$1,
  toList: toList$1,
  napply: napply$1,
  ncompose: ncompose$1,
  reverse: reverse,
  show: show$7,
  mono: mono$8,
  all: all$8,
  some: some$8,
  set1: set1,
  set2: set2,
  get1: get1$6,
  get2: get2$6
};

function make$8(a, b, c) {
  return [
          a,
          [
            b,
            [
              c,
              undefined
            ]
          ]
        ];
}

var units$2 = [
  undefined,
  units$1
];

function over$1(fn, param) {
  var match = param[1];
  var match$1 = match[1];
  return [
          param[0],
          [
            match[0],
            [
              Curry._1(fn, match$1[0]),
              match$1[1]
            ]
          ]
        ];
}

function uncurry$2(fn, param) {
  var match = param[1];
  return Curry._3(fn, param[0], match[0], match[1][0]);
}

function curry$2(fn, a, b, c) {
  return Curry._1(fn, make$8(a, b, c));
}

function encode$2(param) {
  return make$8(param[0], param[1], param[2]);
}

function decode$2(param) {
  var match = param[1];
  return [
          param[0],
          match[0],
          match[1][0]
        ];
}

function $$return$2(a) {
  return [
          a,
          [
            a,
            [
              a,
              undefined
            ]
          ]
        ];
}

function toList$2(param) {
  var match = param[1];
  return [
          param[0],
          match[0],
          match[1][0]
        ];
}

function napply$2(param, param$1) {
  var match = param$1[1];
  var match$1 = param[1];
  return make$8(Curry._1(param[0], param$1[0]), Curry._1(match$1[0], match[0]), Curry._1(match$1[1][0], match[1][0]));
}

function ncompose$2(param, param$1) {
  var match = param$1[1];
  var gc = match[1][0];
  var gb = match[0];
  var ga = param$1[0];
  var match$1 = param[1];
  var fc = match$1[1][0];
  var fb = match$1[0];
  var fa = param[0];
  return make$8((function (a) {
                return Curry._1(fa, Curry._1(ga, a));
              }), (function (b) {
                return Curry._1(fb, Curry._1(gb, b));
              }), (function (c) {
                return Curry._1(fc, Curry._1(gc, c));
              }));
}

function reverse$1(param) {
  var match = param[1];
  return make$8(match[1][0], match[0], param[0]);
}

function show$8(param) {
  return "(" + param[0] + ", " + show$7(param[1]) + ")";
}

function mono$9(f, t) {
  return toList$2(napply$2(f, t));
}

function all$9(f, t) {
  return $$Array.all(toList$2(napply$2(f, t)), (function (x) {
                return x;
              }));
}

function some$9(f, t) {
  return $$Array.some(toList$2(napply$2(f, t)), (function (x) {
                return x;
              }));
}

var Tuple3$1 = {
  make: make$8,
  units: units$2,
  over: over$1,
  uncurry: uncurry$2,
  curry: curry$2,
  encode: encode$2,
  decode: decode$2,
  $$return: $$return$2,
  toList: toList$2,
  napply: napply$2,
  ncompose: ncompose$2,
  reverse: reverse$1,
  show: show$8,
  mono: mono$9,
  all: all$9,
  some: some$9,
  set1: set1,
  set2: set2,
  set3: set3,
  get1: get1$6,
  get2: get2$6,
  get3: get3$5
};

function make$9(a, b, c, d) {
  return [
          a,
          make$8(b, c, d)
        ];
}

var units$3 = [
  undefined,
  units$2
];

function over$2(fn, param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  return [
          param[0],
          [
            match[0],
            [
              match$1[0],
              [
                Curry._1(fn, match$2[0]),
                match$2[1]
              ]
            ]
          ]
        ];
}

function uncurry$3(fn, param) {
  var match = param[1];
  var match$1 = match[1];
  return Curry._4(fn, param[0], match[0], match$1[0], match$1[1][0]);
}

function curry$3(fn, a, b, c, d) {
  return Curry._1(fn, make$9(a, b, c, d));
}

function encode$3(param) {
  return make$9(param[0], param[1], param[2], param[3]);
}

function decode$3(param) {
  var match = param[1];
  var match$1 = match[1];
  return [
          param[0],
          match[0],
          match$1[0],
          match$1[1][0]
        ];
}

function $$return$3(a) {
  return [
          a,
          [
            a,
            [
              a,
              [
                a,
                undefined
              ]
            ]
          ]
        ];
}

function toList$3(param) {
  var match = param[1];
  var match$1 = match[1];
  return [
          param[0],
          match[0],
          match$1[0],
          match$1[1][0]
        ];
}

function napply$3(param, param$1) {
  var match = param$1[1];
  var match$1 = match[1];
  var match$2 = param[1];
  var match$3 = match$2[1];
  return make$9(Curry._1(param[0], param$1[0]), Curry._1(match$2[0], match[0]), Curry._1(match$3[0], match$1[0]), Curry._1(match$3[1][0], match$1[1][0]));
}

function ncompose$3(param, param$1) {
  var match = param$1[1];
  var match$1 = match[1];
  var gd = match$1[1][0];
  var gc = match$1[0];
  var gb = match[0];
  var ga = param$1[0];
  var match$2 = param[1];
  var match$3 = match$2[1];
  var fd = match$3[1][0];
  var fc = match$3[0];
  var fb = match$2[0];
  var fa = param[0];
  return make$9((function (a) {
                return Curry._1(fa, Curry._1(ga, a));
              }), (function (b) {
                return Curry._1(fb, Curry._1(gb, b));
              }), (function (c) {
                return Curry._1(fc, Curry._1(gc, c));
              }), (function (d) {
                return Curry._1(fd, Curry._1(gd, d));
              }));
}

function reverse$2(param) {
  var match = param[1];
  var match$1 = match[1];
  return make$9(match$1[1][0], match$1[0], match[0], param[0]);
}

function show$9(param) {
  return "(" + param[0] + ", " + show$8(param[1]) + ")";
}

function mono$10(f, t) {
  return toList$3(napply$3(f, t));
}

function all$10(f, t) {
  return $$Array.all(toList$3(napply$3(f, t)), (function (x) {
                return x;
              }));
}

function some$10(f, t) {
  return $$Array.some(toList$3(napply$3(f, t)), (function (x) {
                return x;
              }));
}

var Tuple4$1 = {
  make: make$9,
  units: units$3,
  over: over$2,
  uncurry: uncurry$3,
  curry: curry$3,
  encode: encode$3,
  decode: decode$3,
  $$return: $$return$3,
  toList: toList$3,
  napply: napply$3,
  ncompose: ncompose$3,
  reverse: reverse$2,
  show: show$9,
  mono: mono$10,
  all: all$10,
  some: some$10,
  set1: set1,
  set2: set2,
  set3: set3,
  set4: set4,
  get1: get1$6,
  get2: get2$6,
  get3: get3$5,
  get4: get4$4
};

var units$4 = [
  undefined,
  units$3
];

function make$10(a, b, c, d, e) {
  return [
          a,
          make$9(b, c, d, e)
        ];
}

function over$3(fn, param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  return [
          param[0],
          [
            match[0],
            [
              match$1[0],
              [
                match$2[0],
                [
                  Curry._1(fn, match$3[0]),
                  match$3[1]
                ]
              ]
            ]
          ]
        ];
}

function uncurry$4(fn, param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  return Curry._5(fn, param[0], match[0], match$1[0], match$2[0], match$2[1][0]);
}

function curry$4(fn, a, b, c, d, e) {
  return Curry._1(fn, make$10(a, b, c, d, e));
}

function encode$4(param) {
  return make$10(param[0], param[1], param[2], param[3], param[4]);
}

function decode$4(param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  return [
          param[0],
          match[0],
          match$1[0],
          match$2[0],
          match$2[1][0]
        ];
}

function $$return$4(a) {
  return [
          a,
          [
            a,
            [
              a,
              [
                a,
                [
                  a,
                  undefined
                ]
              ]
            ]
          ]
        ];
}

function toList$4(param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  return [
          param[0],
          match[0],
          match$1[0],
          match$2[0],
          match$2[1][0]
        ];
}

function napply$4(param, param$1) {
  var match = param$1[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = param[1];
  var match$4 = match$3[1];
  var match$5 = match$4[1];
  return make$10(Curry._1(param[0], param$1[0]), Curry._1(match$3[0], match[0]), Curry._1(match$4[0], match$1[0]), Curry._1(match$5[0], match$2[0]), Curry._1(match$5[1][0], match$2[1][0]));
}

function ncompose$4(param, param$1) {
  var match = param$1[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var ge = match$2[1][0];
  var gd = match$2[0];
  var gc = match$1[0];
  var gb = match[0];
  var ga = param$1[0];
  var match$3 = param[1];
  var match$4 = match$3[1];
  var match$5 = match$4[1];
  var fe = match$5[1][0];
  var fd = match$5[0];
  var fc = match$4[0];
  var fb = match$3[0];
  var fa = param[0];
  return make$10((function (a) {
                return Curry._1(fa, Curry._1(ga, a));
              }), (function (b) {
                return Curry._1(fb, Curry._1(gb, b));
              }), (function (c) {
                return Curry._1(fc, Curry._1(gc, c));
              }), (function (d) {
                return Curry._1(fd, Curry._1(gd, d));
              }), (function (e) {
                return Curry._1(fe, Curry._1(ge, e));
              }));
}

function reverse$3(param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  return make$10(match$2[1][0], match$2[0], match$1[0], match[0], param[0]);
}

function show$10(param) {
  return "(" + param[0] + ", " + show$9(param[1]) + ")";
}

function mono$11(f, t) {
  return toList$4(napply$4(f, t));
}

function all$11(f, t) {
  return $$Array.all(toList$4(napply$4(f, t)), (function (x) {
                return x;
              }));
}

function some$11(f, t) {
  return $$Array.some(toList$4(napply$4(f, t)), (function (x) {
                return x;
              }));
}

var Tuple5$1 = {
  units: units$4,
  make: make$10,
  over: over$3,
  uncurry: uncurry$4,
  curry: curry$4,
  encode: encode$4,
  decode: decode$4,
  $$return: $$return$4,
  toList: toList$4,
  napply: napply$4,
  ncompose: ncompose$4,
  reverse: reverse$3,
  show: show$10,
  mono: mono$11,
  all: all$11,
  some: some$11,
  set1: set1,
  set2: set2,
  set3: set3,
  set4: set4,
  set5: set5,
  get1: get1$6,
  get2: get2$6,
  get3: get3$5,
  get4: get4$4,
  get5: get5$3
};

function make$11(a, b, c, d, e, f) {
  return [
          a,
          make$10(b, c, d, e, f)
        ];
}

var units$5 = [
  undefined,
  units$4
];

function get(param) {
  return get5$3(param[1]);
}

function set(param, g) {
  return [
          param[0],
          set5(param[1], g)
        ];
}

function over$4(fn, param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  var match$4 = match$3[1];
  return [
          param[0],
          [
            match[0],
            [
              match$1[0],
              [
                match$2[0],
                [
                  match$3[0],
                  [
                    Curry._1(fn, match$4[0]),
                    match$4[1]
                  ]
                ]
              ]
            ]
          ]
        ];
}

function uncurry$5(fn, param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  return Curry._6(fn, param[0], match[0], match$1[0], match$2[0], match$3[0], match$3[1][0]);
}

function curry$5(fn, a, b, c, d, e, f) {
  return Curry._1(fn, make$11(a, b, c, d, e, f));
}

function encode$5(param) {
  return make$11(param[0], param[1], param[2], param[3], param[4], param[5]);
}

function decode$5(param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  return [
          param[0],
          match[0],
          match$1[0],
          match$2[0],
          match$3[0],
          match$3[1][0]
        ];
}

function $$return$5(a) {
  return [
          a,
          [
            a,
            [
              a,
              [
                a,
                [
                  a,
                  [
                    a,
                    undefined
                  ]
                ]
              ]
            ]
          ]
        ];
}

function toList$5(param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  return [
          param[0],
          match[0],
          match$1[0],
          match$2[0],
          match$3[0],
          match$3[1][0]
        ];
}

function napply$5(param, param$1) {
  var match = param$1[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  var match$4 = param[1];
  var match$5 = match$4[1];
  var match$6 = match$5[1];
  var match$7 = match$6[1];
  return make$11(Curry._1(param[0], param$1[0]), Curry._1(match$4[0], match[0]), Curry._1(match$5[0], match$1[0]), Curry._1(match$6[0], match$2[0]), Curry._1(match$7[0], match$3[0]), Curry._1(match$7[1][0], match$3[1][0]));
}

function ncompose$5(param, param$1) {
  var match = param$1[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  var gf = match$3[1][0];
  var ge = match$3[0];
  var gd = match$2[0];
  var gc = match$1[0];
  var gb = match[0];
  var ga = param$1[0];
  var match$4 = param[1];
  var match$5 = match$4[1];
  var match$6 = match$5[1];
  var match$7 = match$6[1];
  var ff = match$7[1][0];
  var fe = match$7[0];
  var fd = match$6[0];
  var fc = match$5[0];
  var fb = match$4[0];
  var fa = param[0];
  return make$11((function (a) {
                return Curry._1(fa, Curry._1(ga, a));
              }), (function (b) {
                return Curry._1(fb, Curry._1(gb, b));
              }), (function (c) {
                return Curry._1(fc, Curry._1(gc, c));
              }), (function (d) {
                return Curry._1(fd, Curry._1(gd, d));
              }), (function (e) {
                return Curry._1(fe, Curry._1(ge, e));
              }), (function (f) {
                return Curry._1(ff, Curry._1(gf, f));
              }));
}

function reverse$4(param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  return make$11(match$3[1][0], match$3[0], match$2[0], match$1[0], match[0], param[0]);
}

function show$11(param) {
  return "(" + param[0] + ", " + show$10(param[1]) + ")";
}

function mono$12(f, t) {
  return toList$5(napply$5(f, t));
}

function all$12(f, t) {
  return $$Array.all(toList$5(napply$5(f, t)), (function (x) {
                return x;
              }));
}

function some$12(f, t) {
  return $$Array.some(toList$5(napply$5(f, t)), (function (x) {
                return x;
              }));
}

var Tuple6$1 = {
  make: make$11,
  units: units$5,
  get: get,
  set: set,
  over: over$4,
  uncurry: uncurry$5,
  curry: curry$5,
  encode: encode$5,
  decode: decode$5,
  $$return: $$return$5,
  toList: toList$5,
  napply: napply$5,
  ncompose: ncompose$5,
  reverse: reverse$4,
  show: show$11,
  mono: mono$12,
  all: all$12,
  some: some$12,
  set1: set1,
  set2: set2,
  set3: set3,
  set4: set4,
  set5: set5,
  set6: set6,
  get1: get1$6,
  get2: get2$6,
  get3: get3$5,
  get4: get4$4,
  get5: get5$3,
  get6: get6$2
};

function make$12(a, b, c, d, e, f, g) {
  return [
          a,
          make$11(b, c, d, e, f, g)
        ];
}

var units$6 = [
  undefined,
  units$5
];

function get$1(param) {
  return get6$2(param[1]);
}

function set$1(param, g) {
  return [
          param[0],
          set6(param[1], g)
        ];
}

function over$5(fn, param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  var match$4 = match$3[1];
  var match$5 = match$4[1];
  return [
          param[0],
          [
            match[0],
            [
              match$1[0],
              [
                match$2[0],
                [
                  match$3[0],
                  [
                    match$4[0],
                    [
                      Curry._1(fn, match$5[0]),
                      match$5[1]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ];
}

function uncurry$6(fn, param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  var match$4 = match$3[1];
  return Curry._7(fn, param[0], match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$4[1][0]);
}

function curry$6(fn, a, b, c, d, e, f, g) {
  return Curry._1(fn, make$12(a, b, c, d, e, f, g));
}

function encode$6(param) {
  return make$12(param[0], param[1], param[2], param[3], param[4], param[5], param[6]);
}

function decode$6(param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  var match$4 = match$3[1];
  return [
          param[0],
          match[0],
          match$1[0],
          match$2[0],
          match$3[0],
          match$4[0],
          match$4[1][0]
        ];
}

function $$return$6(a) {
  return [
          a,
          [
            a,
            [
              a,
              [
                a,
                [
                  a,
                  [
                    a,
                    [
                      a,
                      undefined
                    ]
                  ]
                ]
              ]
            ]
          ]
        ];
}

function toList$6(param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  var match$4 = match$3[1];
  return [
          param[0],
          match[0],
          match$1[0],
          match$2[0],
          match$3[0],
          match$4[0],
          match$4[1][0]
        ];
}

function napply$6(param, param$1) {
  var match = param$1[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  var match$4 = match$3[1];
  var match$5 = param[1];
  var match$6 = match$5[1];
  var match$7 = match$6[1];
  var match$8 = match$7[1];
  var match$9 = match$8[1];
  return make$12(Curry._1(param[0], param$1[0]), Curry._1(match$5[0], match[0]), Curry._1(match$6[0], match$1[0]), Curry._1(match$7[0], match$2[0]), Curry._1(match$8[0], match$3[0]), Curry._1(match$9[0], match$4[0]), Curry._1(match$9[1][0], match$4[1][0]));
}

function ncompose$6(param, param$1) {
  var match = param$1[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  var match$4 = match$3[1];
  var gg = match$4[1][0];
  var gf = match$4[0];
  var ge = match$3[0];
  var gd = match$2[0];
  var gc = match$1[0];
  var gb = match[0];
  var ga = param$1[0];
  var match$5 = param[1];
  var match$6 = match$5[1];
  var match$7 = match$6[1];
  var match$8 = match$7[1];
  var match$9 = match$8[1];
  var fg = match$9[1][0];
  var ff = match$9[0];
  var fe = match$8[0];
  var fd = match$7[0];
  var fc = match$6[0];
  var fb = match$5[0];
  var fa = param[0];
  return make$12((function (a) {
                return Curry._1(fa, Curry._1(ga, a));
              }), (function (b) {
                return Curry._1(fb, Curry._1(gb, b));
              }), (function (c) {
                return Curry._1(fc, Curry._1(gc, c));
              }), (function (d) {
                return Curry._1(fd, Curry._1(gd, d));
              }), (function (e) {
                return Curry._1(fe, Curry._1(ge, e));
              }), (function (f) {
                return Curry._1(ff, Curry._1(gf, f));
              }), (function (g) {
                return Curry._1(fg, Curry._1(gg, g));
              }));
}

function reverse$5(param) {
  var match = param[1];
  var match$1 = match[1];
  var match$2 = match$1[1];
  var match$3 = match$2[1];
  var match$4 = match$3[1];
  return make$12(match$4[1][0], match$4[0], match$3[0], match$2[0], match$1[0], match[0], param[0]);
}

function show$12(param) {
  return "(" + param[0] + ", " + show$11(param[1]) + ")";
}

function mono$13(f, t) {
  return toList$6(napply$6(f, t));
}

function all$13(f, t) {
  return $$Array.all(toList$6(napply$6(f, t)), (function (x) {
                return x;
              }));
}

function some$13(f, t) {
  return $$Array.some(toList$6(napply$6(f, t)), (function (x) {
                return x;
              }));
}

var Tuple7$1 = {
  make: make$12,
  units: units$6,
  get: get$1,
  set: set$1,
  over: over$5,
  uncurry: uncurry$6,
  curry: curry$6,
  encode: encode$6,
  decode: decode$6,
  $$return: $$return$6,
  toList: toList$6,
  napply: napply$6,
  ncompose: ncompose$6,
  reverse: reverse$5,
  show: show$12,
  mono: mono$13,
  all: all$13,
  some: some$13,
  set1: set1,
  set2: set2,
  set3: set3,
  set4: set4,
  set5: set5,
  set6: set6,
  set7: set7,
  get1: get1$6,
  get2: get2$6,
  get3: get3$5,
  get4: get4$4,
  get5: get5$3,
  get6: get6$2,
  get7: get7$1
};

var Nested = {
  t2: t2,
  t3: t3,
  t4: t4,
  t5: t5,
  t6: t6,
  t7: t7,
  t8: t8,
  t9: t9,
  rest: rest,
  get1: get1$6,
  get2: get2$6,
  get3: get3$5,
  get4: get4$4,
  get5: get5$3,
  get6: get6$2,
  get7: get7$1,
  set1: set1,
  set2: set2,
  set3: set3,
  set4: set4,
  set5: set5,
  set6: set6,
  set7: set7,
  Tuple1: Tuple1,
  Tuple2: Tuple2$1,
  Tuple3: Tuple3$1,
  Tuple4: Tuple4$1,
  Tuple5: Tuple5$1,
  Tuple6: Tuple6$1,
  Tuple7: Tuple7$1
};

export {
  fst2 ,
  snd2 ,
  mapl2 ,
  mapr2 ,
  return2 ,
  return3 ,
  return4 ,
  return5 ,
  return6 ,
  return7 ,
  curry2 ,
  curry3 ,
  curry4 ,
  curry5 ,
  curry6 ,
  curry7 ,
  uncurry2 ,
  uncurry3 ,
  uncurry4 ,
  uncurry5 ,
  uncurry6 ,
  uncurry7 ,
  toList2 ,
  toList3 ,
  toList4 ,
  toList5 ,
  toList6 ,
  toList7 ,
  napply2 ,
  napply3 ,
  napply4 ,
  napply5 ,
  napply6 ,
  napply7 ,
  ncompose2 ,
  ncompose3 ,
  ncompose4 ,
  ncompose5 ,
  ncompose6 ,
  ncompose7 ,
  reverse2 ,
  reverse3 ,
  reverse4 ,
  reverse5 ,
  reverse6 ,
  reverse7 ,
  mono ,
  all ,
  some ,
  Tuple2 ,
  Tuple3 ,
  Tuple4 ,
  Tuple5 ,
  Tuple6 ,
  Tuple7 ,
  Nested ,
}
/* No side effect */
