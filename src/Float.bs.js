// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Option from "./Option.bs.js";
import * as Js_math from "rescript/lib/es6/js_math.js";
import * as FloatJs from "./Float.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

var toLocaleString = ((x) => x.toLocaleString());

function fromStringUnsafe(x) {
  return $$Option.getExn(Belt_Float.fromString(x), "Float.fromStringUnsafe");
}

function toString(prim) {
  return String(prim);
}

function toStringWithRadix(prim0, prim1) {
  return prim0.toString(prim1);
}

function $$isNaN(prim) {
  return Number.isNaN(prim);
}

var toLocaleStringOptions = ((x, fmt, opts) => x.toLocaleString(fmt, opts));

function toExponential(prim) {
  return prim.toExponential();
}

function toExponentialWithPrecision(prim0, prim1) {
  return prim0.toExponential(prim1);
}

function toFixed(prim) {
  return prim.toFixed();
}

function toFixedWithPrecision(prim0, prim1) {
  return prim0.toFixed(prim1);
}

function toPrecisionWithPrecision(prim0, prim1) {
  return prim0.toPrecision(prim1);
}

var positiveInfinity = Number.POSITIVE_INFINITY;

var negativeInfinity = Number.NEGATIVE_INFINITY;

function formatNumber(prim0, prim1) {
  return FloatJs.formatNumber(prim0, prim1);
}

function formatNumberDefault(prim) {
  return FloatJs.formatNumber(prim);
}

function shortenLargeFloat(num) {
  if (num >= 1000.0) {
    return FloatJs.formatNumber(num, "0.0a");
  } else {
    return FloatJs.formatNumber(num, "");
  }
}

function round(x) {
  return Math.round(x);
}

function floor(x) {
  return Math.floor(x);
}

function min(prim0, prim1) {
  return Math.min(prim0, prim1);
}

function minMany(prim) {
  return Caml_splice_call.spliceApply(Math.min, [prim]);
}

function max(prim0, prim1) {
  return Math.max(prim0, prim1);
}

function maxMany(prim) {
  return Caml_splice_call.spliceApply(Math.max, [prim]);
}

function random(prim) {
  return Math.random();
}

function abs(prim) {
  return Math.abs(prim);
}

function trunc(prim) {
  return Math.trunc(prim);
}

function sign(prim) {
  return Math.sign(prim);
}

function pow(prim0, prim1) {
  return Math.pow(prim0, prim1);
}

var fromString = Belt_Float.fromString;

var ceil = Js_math.ceil_int;

export {
  toLocaleString ,
  fromString ,
  fromStringUnsafe ,
  toString ,
  toStringWithRadix ,
  $$isNaN ,
  toLocaleStringOptions ,
  toExponential ,
  toExponentialWithPrecision ,
  toFixed ,
  toFixedWithPrecision ,
  toPrecisionWithPrecision ,
  positiveInfinity ,
  negativeInfinity ,
  formatNumber ,
  formatNumberDefault ,
  shortenLargeFloat ,
  round ,
  ceil ,
  floor ,
  min ,
  minMany ,
  max ,
  maxMany ,
  random ,
  abs ,
  trunc ,
  sign ,
  pow ,
}
/* positiveInfinity Not a pure module */
